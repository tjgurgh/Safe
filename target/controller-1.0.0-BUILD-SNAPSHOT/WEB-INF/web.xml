<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="3.1"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_1.xsd">

	<!-- 웹 어플리케이션의 서비스 처리에 관한 내용 정의 파일이며 웹 어플리케이션 서비스 시작시 웹 서버가 읽어서 사용하는 파일이다.-->

	<!-- The definition of the Root Spring Container shared by all Servlets 
		and Filters -->
	<!-- 웹 어플리케이션 서비스 시작과 동시에 처리해야 하는 값 전달 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml,
					 /WEB-INF/spring/security-context.xml
		</param-value>
	</context-param>

	<!-- Creates the Spring Container shared by all Servlets and Filters --> 
	<!-- context-param에 위치한 파일들을 읽어서 controller 객체보다 빨리 생성 시킨다. -->
	<!-- 이벤트 핸들러를 상속받아 메소드를 재정의한 객체, 리스너 객체 등록, 웹 서버 시작시 web.xml에서 읽어들인다.
		서버 시작 시 리스너 객체가 생성되고 중지시 삭제된다. 서비스 실행되는 동안 메모리에 상주해 이벤트 발생시 자동으로 메소드 실행 -->
	<listener>
		<listener-class>	<!-- 실제 리스너 클래스로 <listener>등록시 반드시 지정 -->
		org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

	<!-- Processes application requests -->
	<!-- 서블릿 환경설정 등록, 서블릿 컨테이너가 DispatcherServlet 객체 생성한다. -->
	<!-- DispatcherServlet 객체가 생성된 후 재정의된 init() 실행하여 XmlWebApplicationContext를 생성해 스프링 컨테이너 구동 -->
	<!-- 모든 클라이언트 요청을 가장 먼저 받아들이는 DispatcherServlet으로 FrontController 등록 -->
	<!-- DispatcherServlet 혼자서 클라이언트 요청 처리 X, HandlerMapping, Controller, ViewResolver 객체를 생성해 상호작용 -->
	<servlet>
		<servlet-name>appServlet</servlet-name>	<!-- 서블릿 이름 지정 -->
		<servlet-class>	<!-- 서블릿 클래스 지정 -->
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<init-param>	<!-- 서블릿에 전달할 변수 지정 -->
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>	<!-- 웹 서비스 시작시 서블릿 객체 생성, 생성 시점은 클라이언트 최초 요청시 -->


		<multipart-config>
			<location>c:\\upload</location>
			<max-file-size>20971520</max-file-size>
			<max-request-size>419430400</max-request-size>
			<file-size-threshold>20971520</file-size-threshold>
		</multipart-config>

		<!-- 서버용 <multipart-config> <location>/usr/local/tomcat9/webapps/upload</location> 
			<max-file-size>20971520</max-file-size> <max-request-size>419430400</max-request-size> 
			<file-size-threshold>20971520</file-size-threshold> </multipart-config> -->
	</servlet>

	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>	<!-- URL 요청을 받아서 servlet-name을 찾아 service 실행 -->
	</servlet-mapping>

	<!-- 페이지 실행시마다 자동으로 실행된다. 예를 들어 한글 처리 및 로그 처리에 활용 -->
	<filter>	<!-- filter객체 생성, 생성 시점은 웹 어플리케이션 시작시 -->
		<filter-name>encoding</filter-name>	<!-- filter 논리 이름 지정 -->
		<filter-class>	<!--등록할 필터의 클래스 이름 -->
			org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>	<!-- web.xml에 필터 객체에 변수를 전달 -->
			<param-name>encoding</param-name>	<!-- 필터 객체에 전달할 변수 이름 지정 -->
			<param-value>UTF-8</param-value>	<!-- 필터 객체에 전달할 변수 값 지정 -->
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>	<!-- 등록한 <filter>가 어떤 서블릿을 필터링 할 것인지 설정 -->
		<filter-name>encoding</filter-name>	<!-- 실행할 필터 지정, 클래스 지정X 등록할 <filter-name>에서 선택 -->
		<url-pattern>/*</url-pattern>	<!-- 필터링할 서블릿 지정, 전체 주소 지정하는것이 아닌 어플리케이션 이름 생략 후 지정 -->
	</filter-mapping>

	<!-- Spring Security 설정 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>
			org.springframework.web.filter.DelegatingFilterProxy
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>




</web-app>
